// Code generated by goctl. DO NOT EDIT.
// Source: gateway.proto

package gatewayservice

import (
	"context"

	"github.com/cherish-chat/imcloudx-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetSessionDescriptionReq  = pb.GetSessionDescriptionReq
	GetSessionDescriptionResp = pb.GetSessionDescriptionResp
	NodeReq                   = pb.NodeReq
	NodeResp                  = pb.NodeResp
	SessionDescription        = pb.SessionDescription
	WsReceiveMessageBinary    = pb.WsReceiveMessageBinary

	GatewayService interface {
		GetSessionDescription(ctx context.Context, in *GetSessionDescriptionReq, opts ...grpc.CallOption) (*GetSessionDescriptionResp, error)
		Node(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeResp, error)
	}

	defaultGatewayService struct {
		cli zrpc.Client
	}
)

func NewGatewayService(cli zrpc.Client) GatewayService {
	return &defaultGatewayService{
		cli: cli,
	}
}

func (m *defaultGatewayService) GetSessionDescription(ctx context.Context, in *GetSessionDescriptionReq, opts ...grpc.CallOption) (*GetSessionDescriptionResp, error) {
	client := pb.NewGatewayServiceClient(m.cli.Conn())
	return client.GetSessionDescription(ctx, in, opts...)
}

func (m *defaultGatewayService) Node(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeResp, error) {
	client := pb.NewGatewayServiceClient(m.cli.Conn())
	return client.Node(ctx, in, opts...)
}
